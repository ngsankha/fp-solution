#lang racket
(require "../compile.rkt" "../asm/interp.rkt" rackunit)

(define (run e)
  (asm-interp (compile e)))

(define (run/io e s)
  (asm-interp/io (compile e) s))

;; Abscond examples
(check-equal? (run 7) 7)
(check-equal? (run -8) -8)

;; Blackmail examples
(check-equal? (run '(add1 (add1 7))) 9)
(check-equal? (run '(add1 (sub1 7))) 7)

;; Con examples
(check-equal? (run '(if (zero? 0) 1 2)) 1)
(check-equal? (run '(if (zero? 1) 1 2)) 2)
(check-equal? (run '(if (zero? -7) 1 2)) 2)
(check-equal? (run '(if (zero? 0)
                        (if (zero? 1) 1 2)
                        7))
              2)
(check-equal? (run '(if (zero? (if (zero? 0) 1 0))
                        (if (zero? 1) 1 2)
                        7))
              7)

;; Con+ examples
(check-equal? (run '(abs 10)) 10)
(check-equal? (run '(abs -10)) 10)
(check-equal? (run '(- 10)) -10)
(check-equal? (run '(- -10)) 10)
(check-equal? (run '(- (- 10))) 10)
(check-equal? (run '(cond [else 5])) 5)
(check-equal? (run '(cond [(zero? 1) 2] [else 3])) 3)
(check-equal? (run '(cond [(zero? 0) 2] [else 3])) 2)
(check-equal? (run '(cond [(zero? 1) 2] [(zero? (sub1 1)) 4] [else 3])) 4)

;; Dupe examples
(check-equal? (run '#t) #t)
(check-equal? (run '#f) #f)
(check-equal? (run '(if #t 1 2)) 1)
(check-equal? (run '(if 7 1 2)) 1)
(check-equal? (run '(if #f 1 2)) 2)
(check-equal? (run '(cond [#t 1] [#f 2] [else 3])) 1)
(check-equal? (run '(cond [#f 1] [#t 2] [else 3])) 2)
(check-equal? (run '(cond [#f 1] [#f 2] [else 3])) 3)

;; Dupe+ examples
(check-equal? (run '(cond [#t 2] [else 3])) 2)
(check-equal? (run '(cond [#f 2] [else 3])) 3)
(check-equal? (run '(cond [1 2] [else 3])) 2)
(check-equal? (run '(cond [#f 2] [#t 4] [else 3])) 4)
(check-equal? (run '(cond [#t 2] [#f 4] [else 3])) 2)
(check-equal? (run '(cond [#t 2] [#f (add1 #f)] [else 3])) 2)

;; Extort examples
(check-equal? (run '(zero? #t)) 'err)
(check-equal? (run '(zero? #f)) 'err)
(check-equal? (run '(add1 #f)) 'err)
(check-equal? (run '(if (add1 #f) 1 2)) 'err)
(check-equal? (run '(if 1 (add1 #t) 2)) 'err)
(check-equal? (run '(if #f (add1 #t) 2)) 2)
(check-equal? (run '(cond [(add1 #t) 1] [else 2])) 'err)
(check-equal? (run '(cond [#t 1] [(add1 #t) 2] [else 3])) 1)
(check-equal? (run '(cond [#f 1] [(add1 #t) 2] [else 3])) 'err)

;; Extort+ examples
(check-equal? (run '(abs #f)) 'err)
(check-equal? (run '(cond [(add1 #f) 1] [else 2])) 'err)

;; Fraud examples
(check-equal? (run '(let ((x 7)) x)) 7)
(check-equal? (run '(let ((x 7)) 2)) 2)
(check-equal? (run '(let ((x 7)) (add1 x))) 8)
(check-equal? (run '(let ((x (add1 7))) x)) 8)
(check-equal? (run '(let ((x 7)) (let ((y 2)) x))) 7)
(check-equal? (run '(let ((x 7)) (let ((x 2)) x))) 2)
(check-equal? (run '(let ((x 7)) (let ((x (add1 x))) x))) 8)
(check-equal? (run '(let ((x (add1 #f))) 0)) 'err)

;; Fraud+ examples
(check-equal? (run '(let () 7)) 7)
(check-equal? (run '(let ((x 7) (y 8)) 2)) 2)
(check-equal? (run '(let ((x 1) (y 2)) x)) 1)
(check-equal? (run '(let ((x 1) (y 2)) y)) 2)
(check-equal? (run '(let ((x 7) (y 8)) (add1 x))) 8)
(check-equal? (run '(let ((x 7) (y 8)) (add1 y))) 9)
(check-equal? (run '(let ((x (add1 7)) (y 0)) y)) 0)
(check-equal? (run '(let ((x 7) (z 9)) (let ((y 2)) x))) 7)
(check-equal? (run '(let ((x 7) (z 9)) (let ((x 2)) x))) 2)
(check-equal? (run '(let ((x 7) (z 9)) (let ((x (add1 x)) (z z)) x))) 8)
(check-equal? (run '(let ((x (add1 #f)) (z 9)) x)) 'err)
(check-equal? (run '(char? #\a)) #t)
(check-equal? (run '(char? 4)) #f)
(check-equal? (run '(char? #f)) #f)
(check-equal? (run '(integer? #\a)) #f)
(check-equal? (run '(integer? 4)) #t)
(check-equal? (run '(integer? #f)) #f)
(check-equal? (run '(boolean? #\a)) #f)
(check-equal? (run '(boolean? 4)) #f)
(check-equal? (run '(boolean? #t)) #t)
(check-equal? (run '(char->integer #\a)) 97)
(check-equal? (run '(integer->char 97)) #\a)
(check-equal? (run '(integer->char #\a)) 'err)
(check-equal? (run '#\a) #\a)
(check-equal? (run '#\space) #\space)
(check-equal? (run '#\λ) #\λ)
(check-equal? (run '(char->integer #\a)) (char->integer #\a))
(check-equal? (run '(char->integer #\space)) (char->integer #\space))
(check-equal? (run '(char->integer #\λ)) (char->integer #\λ))
(check-equal? (run '(integer->char 97)) #\a)
(check-equal? (run '(integer->char 32)) #\space)
(check-equal? (run '(integer->char 955)) #\λ)
(check-equal? (run '#\嫂) #\嫂)
(check-equal? (run '(integer->char 23234)) #\嫂)
(check-equal? (run '(integer->char #f)) 'err)
(check-equal? (run '(char->integer #f)) 'err)
(check-equal? (run '(integer->char -1)) 'err)
(check-equal? (run '(integer->char #xD800)) 'err)
(check-equal? (run '(integer->char #xDFFF)) 'err)
(check-equal? (run '(integer->char (sub1 #xD800))) (integer->char (sub1 #xD800)))
(check-equal? (run '(integer->char (add1 #xDFFF))) (integer->char (add1 #xDFFF)))

;; Grift examples
(check-equal? (run '(+ 3 4)) 7)
(check-equal? (run '(- 3 4)) -1)
(check-equal? (run '(+ (+ (+ 1 2) (+ 3 4))
                       (+ (+ 5 6) (+ 7 8))))
              36)

;; Hustle examples
(check-equal? (run ''()) ''())
(check-equal? (run '(cons 1 (cons 2 (cons 3 '())))) ''(1 2 3))
(check-equal? (run '(cons 1 (cons 2 (cons 3 4)))) ''(1 2 3 . 4))
(check-equal? (run '(car (cons 1 2))) 1)
(check-equal? (run '(cdr (cons 1 2))) 2)
(check-equal? (run '(box 8)) ''#&8)
(check-equal? (run '(unbox (box 8))) 8)
(check-equal? (run '(unbox (unbox (box (box 8))))) 8)

;; Hustle+ examples
(check-equal? (run "abcd") "abcd")
(check-equal? (run "") "")
(check-equal? (run '(string? "")) #t)
(check-equal? (run '(string? #\a)) #f)
(check-equal? (run '(string-ref "abc" 0)) #\a)
(check-equal? (run '(string-ref "abc" 1)) #\b)
(check-equal? (run '(string-ref "abc" 2)) #\c)
(check-equal? (run '(string-length "")) 0)
(check-equal? (run '(string-length "abc")) 3)
(check-equal? (run '(string-ref #f 0)) 'err)
(check-equal? (run '(string-ref "" #f)) 'err)
(check-equal? (run '(string-ref "abc" -1)) 'err)
(check-equal? (run '(string-ref "abc" 3)) 'err)

;; Iniquity examples
(check-equal? (run '(begin (define (f x) 0) 0)) 0)
(check-equal? (run '(begin (define (f x) 0) (f 1))) 0)
(check-equal? (run '(begin (define (f x) x) (f 1))) 1)
(check-equal? (run '(begin (define (f x) (add1 x)) (f 1))) 2)
(check-equal? (run '(begin (define (f x) 0) (add1 #f))) 'err)
(check-equal? (run '(begin (define (f x) (add1 #f)) 0)) 0)
(check-equal? (run '(begin (define (f x) (add1 #f)) (f 0))) 'err)
(check-equal? (run '(begin (define (f x) 0) (f))) 'err)
(check-equal? (run '(begin (define (f x) 0) (f 1 2))) 'err)
(check-equal? (run
               '(begin (define (tri x)
                         (if (zero? x)
                             0
                             (+ x (tri (sub1 x)))))
                       (tri 9)))
              45)
(check-equal? (run
               '(begin (define (even? x)
                         (if (zero? x)
                             #t
                             (odd? (sub1 x))))
                       (define (odd? x)
                         (if (zero? x)
                             #f
                             (even? (sub1 x))))
                       (even? 101)))
              #f)
(check-equal? (run
               '(begin (define (map-add1 xs)
                         (if (empty? xs)
                             '()
                             (cons (add1 (car xs))
                                   (map-add1 (cdr xs)))))
                       (map-add1 (cons 1 (cons 2 (cons 3 '()))))))
               ''(2 3 4))

;; Iniquity+ examples
(check-equal? (run '(begin (define (f x) x)
                           (apply f (cons 1 '()))))
              1)
(check-equal? (run '(begin (define (f x y) y)
                           (apply f (cons 1 (cons 2 '())))))
              2)
(check-equal? (run '(begin (define (f x y) y)
                           (apply f (cons 1 (cons 2 (cons 3 '()))))))
              'err)
(check-equal? (run '(begin (define (f x y) y)
                           (apply f (cons 1 '()))))
              'err)
(check-equal? (run '(begin (define (f x) (apply h (cons 1 x)))
                           (define (h x y z) z)
                           (f (cons 2 (cons 3 '())))))
              3)
(check-equal? (run '(begin (define (f x) x)
                           (apply f #f)))
              'err)
(check-equal? (run '(begin (define (f x) x)
                           (apply f (cons 1 2))))
              'err)
(check-equal? (run '(begin (define (f . x) x)
                           (f 1)))
              ''(1))
(check-equal? (run '(begin (define (f . x) x)
                           (f 1 2 3)))
              ''(1 2 3))
(check-equal? (run '(begin (define (f x y . z) z)
                           (f 1 2 3)))
              ''(3))
(check-equal? (run '(begin (define (f . z) z)
                           (apply f (cons 1 (cons 2 (cons 3 '()))))))
              ''(1 2 3))

(check-equal? (run '(begin (define (f x y . z) z)
                           (apply f (cons 1 (cons 2 '())))))
              ''())
(check-equal? (run '(begin (define (f x y . z) z)
                           (apply f (cons 1 '()))))
              'err)


;; Loot+

(check-equal? (run '(let ((z 0)) ((λ x z)))) 0)
(check-equal? (run '(apply (λ x x) (cons 1 '()))) ''(1))
(check-equal? (run '(apply (λ (x) x) (cons 1 '()))) 1)
(check-equal? (run '(apply (λ x x) '())) ''())
(check-equal? (run '(let ((z 0)) (apply (λ (x) z) (cons 1 '())))) 0)
(check-equal? (run '(let ((z 0)) (apply (λ x z) (cons 1 '())))) 0)
(check-equal? (run '(let ((z 0)) (apply (λ x z) '()))) 0)
(check-equal? (run '(let ((z 0))
                      (apply (λ xs z) (cons 1 '()))))
              0)

;; Quote

(check-equal? (run ''(1 2 3)) ''(1 2 3))
(check-equal? (run ''(1 2 . 3)) ''(1 2 . 3))
(check-equal? (run ''(1 x . 3)) ''(1 x . 3))
(check-equal? (run '(car '(1 . 2))) 1)
(check-equal? (run '(cdr '(1 . 2))) 2)
(check-equal? (run ''("a" "b")) ''("a" "b"))

;; I/O

(check-equal? (run/io '(read-char) "a") "#\\a\n")
(check-equal? (run/io '(list (read-char) (read-char)) "ab") "'(#\\a #\\b)\n")
(check-equal? (run/io '(write-char #\a) "") "a")
(check-equal? (run/io '(display "abc") "") "abc")
(check-equal? (run/io '(void) "") "")
(check-equal? (run/io '(read-char) "") "#<eof>\n")
(check-equal? (run/io '(eof-object? (read-char)) "") "#t\n")
(check-equal? (run/io '(eof-object? (read-char)) "a") "#f\n")

;; match

(check-equal? (run '(match 1 [1 #t] [2 #f])) #t)
(check-equal? (run '(match 2 [1 #t] [2 #f])) #f)
(check-equal? (run '(match 3 [1 #t] [2 #f])) 'err)
(check-equal? (run '(match 3 [1 #t] [2 #f] [x x])) 3)
(check-equal? (run '(match '(1 2 3)
                      [(list x y z) (+ (+ x y) z)]))
              6)
(check-equal? (run '(match '(x 2 3)
                      [(list 'x y z) (+ y z)]))
              5)
(check-equal? (run '(match '(x 2 3)
                      [(list 'z y z) (+ y z)]
                      [_ 2]))
              2)
